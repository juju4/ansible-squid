---
# compile with openssl to support https from source

- name: Ubuntu | Enable universe repository
  ansible.builtin.apt_repository:
    repo: "{{ item }}"
  loop:
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release | lower }} universe"
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release | lower }}-updates universe"
  when: ansible_distribution == 'Ubuntu'

- name: Ubuntu | Enable universe security repository
  ansible.builtin.lineinfile:
    dest: /etc/apt/sources.list
    mode: '0644'
    owner: root
    regexp: "^deb http://security.ubuntu.com/ubuntu/ {{ ansible_distribution_release | lower }}-security universe"
    line: "deb http://security.ubuntu.com/ubuntu/ {{ ansible_distribution_release | lower }}-security universe"
  when: ansible_distribution == 'Ubuntu'

- name: Ensure squid build dir exists
  ansible.builtin.file:
    dest: "{{ squidbuild_dir }}"
    state: directory
    mode: '0700'

- name: Squid openssl source | Check if binary exists
  ansible.builtin.stat:
    path: "/usr/local/bin/squid"
  register: localsquid

- name: Squid openssl local from source
  when: not localsquid.stat.exists
  block:
    - name: Squid openssl | Install build and report tools
      ansible.builtin.apt:
        pkg: "{{ ['cron'] + squidbuild_pkgs + squidhttps_pkgs + squid_report_pkgs | default(omit) }}"
        state: present
        update_cache: yes
        cache_valid_time: 3600
      register: pkg_result
      until: pkg_result is success

    - name: Get squid source code
      ansible.builtin.get_url:
        url: http://www.squid-cache.org/Versions/v6/squid-{{ squid_src_ver }}.tar.gz
        dest: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}.tar.gz"
        mode: '0600'
        checksum: "{{ squid_src_hash }}"
      register: dl_result
      until: dl_result is success

    - name: Squid openssl | Unarchive source
      ansible.builtin.unarchive:
        src: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}.tar.gz"
        dest: "{{ squidbuild_dir }}"
        remote_src: true

    - name: Get patches from Orchestrator
      ansible.builtin.copy:
        src: "{{ item.url }}"
        dest: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}{{ item.dir }}/{{ item.url | basename }}"
        mode: '0600'
      loop: "{{ squidhttps_src_localpatch }}"
      register: dl_result
      until: dl_result is success

    - name: Squid openssl | Patch
      ansible.posix.patch:
        src: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}{{ item.dir }}/{{ item.url | basename }}"
        basedir: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}{{ item.dir }}"
        remote_src: "{{ item.remote | default(true) }}"
        strip: "{{ item.strip | default(0) }}"
      loop: "{{ squidhttps_src_localpatch }}"

    - name: Debug | var ansible_env
      ansible.builtin.debug:
        var: ansible_env
        verbosity: 1

    # "configure: error: eCAP support requires loadable modules. Please do not use --disable-shared with --enable-ecap."
    #         '--enable-ecap' \

    - name: Squid openssl | Configure
      ansible.builtin.shell:
        cmd: |
          ./configure \
            '--build=x86_64-linux-gnu' \
            '--host=x86_64' \
            --prefix=/usr/local \
            '--includedir=${prefix}/include' \
            '--mandir=${prefix}/share/man' \
            '--infodir=${prefix}/share/info' \
            --sysconfdir=/etc \
            --localstatedir=/var \
            '--disable-option-checking' \
            '--disable-silent-rules' \
            '--libdir=${prefix}/lib/x86_64-linux-gnu' \
            '--runstatedir=/run' \
            '--disable-maintainer-mode' \
            '--disable-dependency-tracking' \
            '--datadir=/usr/share/squid' \
            '--sysconfdir=/etc/squid' \
            '--libexecdir=/usr/lib/squid' \
            '--mandir=/usr/share/man' \
            '--enable-inline' \
            '--disable-arch-native' \
            '--enable-async-io=8' \
            '--enable-storeio=ufs,aufs,diskd,rock' \
            '--enable-removal-policies=lru,heap' \
            '--enable-delay-pools' \
            '--enable-cache-digests' \
            '--enable-icap-client' \
            '--enable-ssl' \
            '--enable-ssl-crtd' \
            '--with-openssl' \
            '--enable-follow-x-forwarded-for' \
            '--enable-auth-basic=DB,fake,getpwnam,LDAP,NCSA,PAM,POP3,RADIUS,SASL,SMB' \
            '--enable-auth-digest=file,LDAP' \
            '--enable-auth-negotiate=kerberos,wrapper' \
            '--enable-auth-ntlm=fake,SMB_LM' \
            '--enable-external-acl-helpers=file_userip,kerberos_ldap_group,LDAP_group,session,SQL_session,time_quota,unix_group,wbinfo_group' \
            '--enable-security-cert-validators=fake' \
            '--enable-storeid-rewrite-helpers=file' \
            '--enable-url-rewrite-helpers=fake' \
            '--enable-eui' '--enable-esi' \
            '--enable-icmp' '--enable-zph-qos' \
            '--disable-translation' \
            '--with-swapdir=/var/spool/squid' \
            '--with-logdir=/var/log/squid' \
            '--with-pidfile=/run/squid.pid' \
            '--with-filedescriptors=65536' \
            '--with-large-files' \
            --with-default-user=proxy \
            '--enable-linux-netfilter' \
            '--with-systemd'
      args:
        chdir: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}"
        creates: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}/Makefile"

    - name: Pause
      ansible.builtin.pause:
      when: false

    - name: Squid openssl | Build binary - be patient...
      ansible.builtin.command:
        cmd: "make"
      args:
        chdir: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}"
        creates: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}/src/squid"
      async: 3600
      poll: 0
      register: srcbuild

    - name: Squid openssl | Check on async task for binary building
      ansible.builtin.async_status:  # noqa no-handler
        jid: "{{ srcbuild.ansible_job_id }}"
      register: job_result
      until: job_result.finished or srcbuild.finished
      retries: 60
      delay: 60
      when: srcbuild is changed

    - name: Squid openssl | Make check
      ansible.builtin.command:
        cmd: "make check"
      args:
        chdir: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}"
        creates: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}/test-suite/VirtualDeleteOperator"

    - name: Squid openssl | Install
      ansible.builtin.command:
        cmd: "make install"
      args:
        chdir: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}"
        creates: /usr/local/sbin/squid

    - name: Symlink squid bin for systemd unit
      ansible.builtin.file:
        src: /usr/local/sbin/squid
        dest: /usr/sbin/squid
        mode: '0755'
        owner: root
        state: link

    - name: Set squid systemd unit
      ansible.builtin.copy:
        src: "{{ squidbuild_dir }}/squid-{{ squid_src_ver }}/tools/systemd/squid.service"
        dest: /etc/systemd/system/squid.service
        mode: '0644'
        owner: root
        remote_src: true
      notify:
        - Reload systemd
        - Restart squid

    - name: Ensure correct ownership
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0755'
        owner: proxy
        state: directory
      loop:
        - /var/log/squid
        - /var/spool/squid
