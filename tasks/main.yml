---

- name: Include version-specific variables for Ubuntu.
  ansible.builtin.include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_distribution == 'Ubuntu'
- name: Include version-specific variables for RedHat
  ansible.builtin.include_vars: "RedHat-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_os_family == "RedHat"

- import_tasks: debian.yml
  when: >
    ((ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
      and not squid_https
    )

- import_tasks: debian-https.yml
  when: >
    (
      ansible_distribution == 'Debian' or
      (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int >= 18)
    )
    and squid_https and False

- import_tasks: redhat.yml
  when: ansible_os_family == "RedHat"

- include_tasks: https.yml
  when: squid_https|bool

- import_tasks: ads.yml
  when: squid_filter_ads is defined and squid_filter_ads

- name: Configure given extra list templates
  ansible.builtin.template:
    src: "{{ item.s }}.j2"
    dest: "{{ item.d }}"
    mode: "{{ item.m }}"
    backup: yes
  with_items: "{{ squid_list_templates_acl }}"
  notify:
    - Restart squid

- name: Update configuration
  ansible.builtin.template:
    src: "{{ squidconf_template }}"
    dest: "{{ squid_confdir }}/squid.conf"
    owner: root
    group: "{{ squid_user }}"
    mode: '0640'
    validate: squid -k parse -f %s
    backup: yes
  notify:
    - Restart squid

- name: Ensure log dir exists
  ansible.builtin.file:
    dest: "{{ squid_customlog_path | dirname }}"
    state: directory
    mode: '0755'
    owner: "{{ squid_user }}"
  when: squid_customlog_path is defined and squid_customlog_path

## http://wiki.squid-cache.org/Features/CustomErrors
- name: Remove squid signature from templates
  ansible.builtin.replace:
    dest: "{{ item }}"
    regexp: '<p>Generated %T by %h \(%s\)</p>'
    replace: '<p>Generated %T by %h (Squid Proxy)</p>'
    mode: '0644'
    # Note: backup is generating mess if rerun as we are not differencing files from their backup...
    # backup=yes
  with_fileglob:
    - "{{ squid_errors_template }}en/ERR_*"

- name: Copy script for transparent proxy user
  ansible.builtin.copy: src=transparent-user.sh dest=/usr/local/bin/transparent-user.sh mode=0755

- import_tasks: dansguardian.yml
  when: squid_urlfiltering_enable is defined and squid_urlfiltering_enable and squid_urlfiltering_tool == 'dansguardian'

- import_tasks: e2guardian.yml
  when: squid_urlfiltering_enable is defined and squid_urlfiltering_enable and squid_urlfiltering_tool == 'e2guardian'

- import_tasks: squidguard.yml
  when: squid_urlfiltering_enable is defined and squid_urlfiltering_enable and squid_urlfiltering_tool == 'squidguard'

- import_tasks: splash.yml
  when: squid_splash_enable|bool

- name: Enable and start squid service
  ansible.builtin.service:
    name: "{{ squid_svc }}"
    state: started
    enabled: yes
  when: >
    not (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "docker" or ansible_virtualization_type == "containerd")
        )

- name: Docker | check start marker
  ansible.builtin.stat:
    path: /root/.ansible_squid_start
  register: marker1

- name: Container start
  block:
    - name: Docker | create swap directories
      ansible.builtin.command: squid -z
      args:
        creates: /var/spool/squid/00
    - name: Docker | start squid  # noqa no-changed-when
      ansible.builtin.shell: nohup /usr/sbin/squid -sYC &
    - name: Docker | check process
      ansible.builtin.command: ps aux
      changed_when: false
      ignore_errors: true
      register: ps
    - name: Debug | process output
      ansible.builtin.debug: var=ps verbosity=1
    - name: Docker | add start marker
      ansible.builtin.file:
        path: /root/.ansible_squid_start
        mode: '0600'
        state: touch
  when: >
    not marker1.stat.exists and
    (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "docker" or ansible_virtualization_type == "containerd")
    )

- import_tasks: rsyslog.yml

- import_tasks: systemd.yml
  when: squid_systemd_restriction_enable|bool

- import_tasks: calamaris.yml
  when: squid_calamaris_enable|bool and ansible_os_family == "Debian"

- import_tasks: sarg.yml
  when: squid_sarg_enable|bool and ansible_os_family == "Debian"

- import_tasks: reporting.yml
  when: squid_reporting

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure clamd available before ending
  ansible.builtin.wait_for:
    path: /tmp/clamd.ctl
  when: squid_urlfiltering_enable is defined and squid_urlfiltering_enable and squid_urlfiltering_tool == 'dansguardian' and squid_dansguardian_clamd

- import_tasks: testing.yml
  when: squid_testing|bool
