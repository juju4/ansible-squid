---

- name: Get stat of /usr/bin/step
  ansible.builtin.stat:
    path: /usr/bin/step
  register: has_step_cli

- name: Debian | Install small step
  when:
    - ansible_os_family == 'Debian'
    - not has_step_cli.stat.exists
  block:
    - name: Debian | Set fact
      ansible.builtin.set_fact:
        step_pkg: https://dl.smallstep.com/cli/docs-cli-install/latest/step-cli_amd64.deb
    - name: Debian | Download package
      ansible.builtin.get_url:
        url: "{{ step_pkg }}"
        dest: "{{ tmp_ssl_dir }}/{{ step_pkg | basename }}"
        mode: '0600'
        owner: root
      register: dl_result
      until: dl_result is success
    - name: Install small step
      ansible.builtin.package:
        deb: "{{ tmp_ssl_dir }}/{{ step_pkg | basename }}"
        state: present

- name: RedHat | Install small step
  when:
    - ansible_os_family == 'RedHat'
    - not has_step_cli.stat.exists
  block:
    - name: RedHat | Set fact
      ansible.builtin.set_fact:
        step_pkg: https://dl.smallstep.com/cli/docs-cli-install/latest/step-cli_amd64.rpm
    - name: Install small step
      ansible.builtin.package:
        name: "{{ tmp_ssl_dir }}/{{ step_pkg | basename }}"
        state: present
      register: pkg_result
      until: pkg_result is success

- name: Check if certificate exists
  ansible.builtin.stat:
    path: "/etc/squid/{{ site_server_name }}.crt"
  register: has_stepca_cert

- name: Step-ca token
  when:
    - squid_stepca_host is defined
    - squid_stepca_host | length > 0
    - not has_stepca_cert.stat.exists or squid_stepca_force_issue | bool
  block:
    # https://smallstep.com/docs/tutorials/intermediate-ca-new-ca/
    - name: Create new intermediate CA csr with step-ca
      ansible.builtin.command:
        cmd: |
          step certificate create "Squid Intermediate CA Name" intermediate.csr {{ site_server_name }}.key  --csr --no-password --insecure
      args:
        chdir: /tmp
        creates: /tmp/intermediate.csr

    - name: Retrieve intermediate CA csr to orchestrator
      ansible.builtin.fetch:
        src: /tmp/intermediate.csr
        dest: files
        mode: '0400'

    - name: Push intermediate CA csr to stepca server
      ansible.builtin.copy:
        src: "{{ inventory_hostname }}/intermediate.csr"
        dest: /tmp/intermediate.csr
        mode: '0600'
      delegate_to: "{{ squid_stepca_host }}"
      become: yes
      become_user: "{{ squid_stepca_user | default('step') }}"

    - name: Step-ca server | Sign new intermediate CA csr with step-ca
      ansible.builtin.command:  # noqa no-changed-when
        cmd: |
          step certificate sign --profile intermediate-ca /tmp/intermediate.csr ~/.step/certs/root_ca.crt ~/.step/secrets/root_ca_key --password-file=$HOME/.password
      args:
        chdir: /tmp
      delegate_to: "{{ squid_stepca_host }}"
      become: yes
      become_user: "{{ squid_stepca_user | default('step') }}"
      register: intermediate_ca

    - name: Save intermediate CA on squid server
      ansible.builtin.copy:
        content: "{{ intermediate_ca.stdout }}"
        dest: "/tmp/{{ site_server_name }}.crt"
        mode: '0600'
        owner: root

    - name: Retrieve intermediate CA files to orchestrator
      ansible.builtin.fetch:
        src: "{{ item }}"
        dest: files
        mode: '0400'
      loop:
        - "/tmp/{{ site_server_name }}.crt"
        - "/tmp/{{ site_server_name }}.key"

    - name: Push intermediate CA files to squid server
      ansible.builtin.copy:
        src: "{{ inventory_hostname }}/tmp/{{ item | basename }}"
        dest: "/etc/squid/{{ item | basename }}"
        mode: '0600'
      loop:
        - "{{ tmp_ssl_dir }}/{{ site_server_name }}.crt"
        - "{{ tmp_ssl_dir }}/{{ site_server_name }}.key"
      notify:
        - Restart squid

- name: Check squid cert is CA
  ansible.builtin.command:
    cmd: |
      openssl x509 -in /etc/squid/{{ site_server_name }}.crt -text
  become: true
  register: cert
  changed_when: false
  failed_when:
    - "'CA:TRUE' not in cert.stdout"
