---

- name: Get stat of /usr/bin/step
  ansible.builtin.stat:
    path: /usr/bin/step
  register: has_step_cli

- name: Debian | Install small step
  when:
    - ansible_os_family == 'Debian'
    - not has_step_cli.stat.exists
  block:
    - name: Debian | Set fact
      ansible.builtin.set_fact:
        step_pkg: https://dl.smallstep.com/cli/docs-cli-install/latest/step-cli_amd64.deb
    - name: Debian | Download package
      ansible.builtin.get_url:
        url: "{{ step_pkg }}"
        dest: "{{ tmp_ssl_dir }}/{{ step_pkg | basename }}"
        mode: '0600'
        owner: root
      register: dl_result
      until: dl_result is success
    - name: Install small step
      ansible.builtin.package:
        deb: "{{ tmp_ssl_dir }}/{{ step_pkg | basename }}"
        state: present

- name: RedHat | Install small step
  when:
    - ansible_os_family == 'RedHat'
    - not has_step_cli.stat.exists
  block:
    - name: RedHat | Set fact
      ansible.builtin.set_fact:
        step_pkg: https://dl.smallstep.com/cli/docs-cli-install/latest/step-cli_amd64.rpm
    - name: Install small step
      ansible.builtin.package:
        name: "{{ tmp_ssl_dir }}/{{ step_pkg | basename }}"
        state: present
      register: pkg_result
      until: pkg_result is success

- name: Check if certificate exists
  ansible.builtin.stat:
    path: "/root/{{ site_server_name }}.crt"
  register: has_stepca_cert

# FIXME! to be fully operational and validated, it must be a CA or Intermediate CA
# step-ca does not allow such creation with token in default config
- name: Step-ca token
  when:
    - squid_stepca_host is defined
    - squid_stepca_host | length > 0
    - not has_stepca_cert.stat.exists or squid_stepca_force_issue | bool
  block:
    - name: Create token on step-ca certificate server
      ansible.builtin.command:  # noqa no-changed-when
        cmd: "step ca token --provisioner-password-file={{ stepca_host_provisioner_passfile }} {{ stepca_args }} {{ squid_target_host_cn }}{% if squid_cert_san %}{% for item in squid_cert_san %} --san {{ item }}{% endfor %}{% endif %}"
      delegate_to: "{{ squid_stepca_host }}"
      become: yes
      become_user: "{{ squid_stepca_user | default('step') }}"
      register: stepca_token
    - name: Create new certificate for requested domain with step-ca and token
      ansible.builtin.command:
        cmd: "step ca certificate --token={{ stepca_token.stdout }} {{ stepca_args }} {{ squid_target_host_cn }} {{ site_server_name }}.crt {{ site_server_name }}.key{% if squid_stepca_force_issue | bool %} --force {% endif %}"
      args:
        chdir: /root
        # if want to renew certificate, skip on file existence and add '--force' above (else overwrite question)
        creates: "{% if squid_stepca_force_issue | bool %}{{ omit }}{% else %}/root/{{ site_server_name }}.crt{% endif %}"
      environment:
        STEPDEBUG: '1'
      register: stepca_cert
      until: stepca_cert is success

- name: Step-ca provisioner password file
  when: >
    squid_stepca_host is not defined or
    squid_stepca_host | length == 0
  block:
    - name: Create new certificate for requested domain with step-ca
      ansible.builtin.command:
        cmd: "step ca certificate --password-file={{ stepca_pass_file }} {{ stepca_args }} {{ squid_target_host_cn }} {{ site_server_name }}.crt {{ site_server_name }}.key"
      args:
        chdir: /root
        # if want to renew certificate, can't skip on file existence
        creates: "/root/{{ site_server_name }}.crt"

- name: Copy certificate files to needed locations
  ansible.builtin.copy:
    src: "{{ item.s }}"
    dest: "{{ item.d }}"
    mode: "{{ item.m }}"
    remote_src: true
  loop:
    - { s: "/root/{{ site_server_name }}.crt", d: "{{ ssl_fullchain }}", m: '0644' }
    - { s: "/root/{{ site_server_name }}.key", d: "{{ ssl_privkey }}", m: '0600' }
  notify:
    - Restart squid
  when:
    # Else can overwrite current certificate with an expired one
    - not has_stepca_cert.stat.exists or squid_stepca_force_issue | bool
